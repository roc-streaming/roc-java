plugins {
    id 'java-library'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '2.0.0'
//    id 'io.franzbecker.gradle-lombok' version '5.0.0'
}

apply from: 'common.gradle'

allprojects {
    group 'org.roc-streaming.roctoolkit'
    version tagVersion
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation project(":commons")

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testImplementation 'org.awaitility:awaitility:3.1.6'
}

//lombok {
//    version = '1.18.26'
//}

ext {
    targetLibraryPath = "${project.rootDir}/libs"
}

compileJava {
    options.headerOutputDirectory = file(project(":roc_jni").projectDir.absolutePath + "/src/main/export")
}

tasks.register('copyNativeDebugDeps') {
    dependsOn ":roc_jni:assembleDebug"
    doLast {
        copyNativeLibs(project(":roc_jni").buildDir.absolutePath + "/debug", targetLibraryPath)
    }
}

tasks.register('copyNativeReleaseDeps') {
    dependsOn ":roc_jni:assembleRelease"
    doLast {
        copyNativeLibs(project(":roc_jni").buildDir.absolutePath + "/release", targetLibraryPath)
    }
}

jar.dependsOn copyNativeReleaseDeps
copyNativeDebugDeps.mustRunAfter jar

project(":roc_jni").afterEvaluate {
    tasks.test.enabled = !project(":roc_jni").extensions.cmake.target.isCrossCompiling.get()
}

test {
    dependsOn copyNativeDebugDeps

    systemProperty "java.library.path", targetLibraryPath

    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

testlogger {
    theme 'mocha'
    showStandardStreams = false
    slowThreshold 5000
}

//task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask) {
//    ext.outputDir = file("$buildDir/delombok")
//    outputs.dir(outputDir)
//    sourceSets.main.java.srcDirs.each {
//        inputs.dir(it)
//        args(it, "-d", outputDir)
//    }
//}

javadoc {
//    dependsOn delombok
//    source = delombok.outputs
    options.overview = "${project.rootDir}/docs/javadoc/overview.html"
    options.memberLevel = System.getProperty("visibility") == "private" ? JavadocMemberLevel.PRIVATE : JavadocMemberLevel.PUBLIC
}

task clangFormat {
    description = 'Formats all .h and .cpp files using clang-format'

    doLast {
        def hFiles = fileTree(dir: 'roc_jni', include: '**/*.h')
        def cppFiles = fileTree(dir: 'roc_jni', include: '**/*.cpp')
        def excludedFiles = fileTree(dir: 'roc_jni', include: '**/org_rocstreaming_roctoolkit_*')

        hFiles = hFiles.minus(excludedFiles)
        cppFiles = cppFiles.minus(excludedFiles)

        hFiles.each { file ->
            exec {
                commandLine 'clang-format', '-i', file
            }
        }

        cppFiles.each { file ->
            exec {
                commandLine 'clang-format', '-i', file
            }
        }
    }
}
