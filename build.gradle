plugins {
    id 'java-library'
    id 'com.adarshr.test-logger' version '2.0.0'
}

apply from: 'common.gradle'

allprojects {
    group 'org.roc-streaming.roctoolkit'
    version tagVersion
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation project(":commons")

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'
}

ext {
    targetLibraryPath = "${project.rootDir}/libs"
}

compileJava {
    options.headerOutputDirectory = file(project(":roc_jni").projectDir.absolutePath + "/src/main/public")
}

class copyNativeDeps extends Copy {
    copyNativeDeps() {
        include "*/*/*.so"
        include "*/*/*.dylib"
        eachFile {
            path = name
        }
        includeEmptyDirs = false
    }
}

task copyNativeDebugDeps(type: copyNativeDeps) {
    from(project(":roc_jni").buildDir.absolutePath + "/debug")
    into targetLibraryPath
    dependsOn ":roc_jni:assembleDebug"
}

task copyNativeReleaseDeps(type: copyNativeDeps) {
    from(project(":roc_jni").buildDir.absolutePath + "/release")
    into targetLibraryPath
    dependsOn ":roc_jni:assembleRelease"
}

jar.dependsOn copyNativeReleaseDeps
copyNativeDebugDeps.mustRunAfter jar

project(":roc_jni").afterEvaluate {
    tasks.test.enabled = !project(":roc_jni").extensions.cmake.target.isCrossCompiling.get()
}

test {
    dependsOn copyNativeDebugDeps

    systemProperty "java.library.path", targetLibraryPath

    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}

testlogger {
    theme 'mocha'
    showStandardStreams = false
    slowThreshold 5000
}

javadoc {
    options.overview = "${project.rootDir}/docs/javadoc/overview.html"
    options.memberLevel = System.getProperty("visibility") == "private" ? JavadocMemberLevel.PRIVATE : JavadocMemberLevel.PUBLIC
}
