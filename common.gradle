import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

def getTagVersion = {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe", "--tags", "--match", "v*"
            standardOutput = stdout
        }
        def tag = stdout.toString().trim()
        return tag.substring(1)
    } catch (exception) {
        return "SNAPSHOT"
    }
}

ext {
    tagVersion = getTagVersion()
}

ext.copyNativeLibs = { start, target ->
    Path startPath = Paths.get(start)
    Path targetPath = Paths.get(target)

    targetPath.toFile().mkdirs()
    Files.walk(startPath).withCloseable { stream ->
        stream
                .filter({ path -> path.getFileName().toString().endsWith(".dylib") || path.getFileName().toString().endsWith(".so") })
                .forEach({ path ->
                    try {
                        Files.copy(path, targetPath.resolve(path.getFileName()), StandardCopyOption.REPLACE_EXISTING)
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                });
    }
}