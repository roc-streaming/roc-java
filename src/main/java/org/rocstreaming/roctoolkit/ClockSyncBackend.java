// Code generated by bindgen.py from roc-streaming/bindgen
// roc-toolkit git tag: v0.3.0, commit: 57b932b8

package org.rocstreaming.roctoolkit;

/**
 * Clock synchronization algorithm.
 * <p>
 * Defines how sender and receiver clocks are synchronized.
 */
public enum ClockSyncBackend {

    /**
     * Disable clock synchronization.
     * <p>
     * In this mode, sender and receiver clocks are not synchronized. This mode is generally
     * not recommended, since clock drift will lead to periodic playback disruptions caused
     * by underruns and overruns.
     */
    DISABLE(-1),

    /**
     * Default backend.
     * <p>
     * Current default is {@link ClockSyncBackend#NIQ}.
     */
    DEFAULT(0),

    /**
     * Clock synchronization based on network incoming queue size.
     * <p>
     * In this mode, receiver monitors incoming queue size and adjusts playback clock speed
     * to match the estimated capture clock speed.
     * <p>
     * Pros:
     * <ul>
     *   <li>works with any protocol (does not require RTCP or NTP)</li>
     * </ul>
     * <p>
     * Cons:
     * <ul>
     *   <li>synchronizes only clock speed, but not position; different receivers will have different
     *       (constant) delays</li>
     *   <li>affected by network jitter; spikes in packet delivery will cause slow oscillations in
     *       clock speed</li>
     * </ul>
     */
    NIQ(2),
    ;

    final int value;

    ClockSyncBackend(int value) {
        this.value = value;
    }
}
