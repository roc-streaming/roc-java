// Code generated by bindgen.py from roc-streaming/bindgen
// roc-toolkit git tag: v0.3.0, commit: 57b932b8

package org.rocstreaming.roctoolkit;

/**
 * Forward Error Correction encoding.
 * <p>
 * Each FEC encoding is caompatible with specific protocols.
 */
public enum FecEncoding {

    /**
     * No FEC encoding.
     * <p>
     * Compatible with {@link Protocol#RTP} protocol.
     * <p>
     * Pros:
     * <ul>
     *   <li>compatible with third-party software that does not support FECFRAME</li>
     * </ul>
     * <p>
     * Cons:
     * <ul>
     *   <li>no packet recovery</li>
     * </ul>
     */
    DISABLE(-1),

    /**
     * Default FEC encoding.
     * <p>
     * Current default is {@link FecEncoding#RS8M}.
     */
    DEFAULT(0),

    /**
     * Reed-Solomon FEC encoding (RFC 6865) with m=8.
     * <p>
     * Good for small block sizes (below 256 packets). Compatible with
     * {@link Protocol#RTP_RS8M_SOURCE} and {@link Protocol#RS8M_REPAIR} protocols for source
     * and repair endpoints.
     * <p>
     * Pros:
     * <ul>
     *   <li>good repair capabilities even on small block sizes</li>
     * </ul>
     * <p>
     * Cons:
     * <ul>
     *   <li>high CPU usage on large block sizes</li>
     * </ul>
     */
    RS8M(1),

    /**
     * LDPC-Staircase FEC encoding (RFC 6816).
     * <p>
     * Good for large block sizes (above 1024 packets). Compatible with
     * {@link Protocol#RTP_LDPC_SOURCE} and {@link Protocol#LDPC_REPAIR} protocols for source
     * and repair endpoints.
     * <p>
     * Pros:
     * <ul>
     *   <li>low CPU usage even on large block sizes</li>
     * </ul>
     * <p>
     * Cons:
     * <ul>
     *   <li>low repair capabilities on small block sizes</li>
     * </ul>
     */
    LDPC_STAIRCASE(2),
    ;

    final int value;

    FecEncoding(int value) {
        this.value = value;
    }
}
