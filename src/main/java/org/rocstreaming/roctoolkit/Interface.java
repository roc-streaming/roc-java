// DO NOT EDIT! Code generated by generate_enums script from roc-toolkit
// roc-toolkit git tag: v0.2.5-11-g14d642e9, commit: 14d642e9

package org.rocstreaming.roctoolkit;

/**
 * Network interface.
 * <p>
 * Interface is a way to access the peer (sender or receiver) via network.
 * <p>
 * Each peer slot has multiple interfaces, one of each type. The user
 * interconnects peers by binding one of the first peer's interfaces to an URI
 * and then connecting the corresponding second peer's interface to that URI.
 * <p>
 * A URI is represented by {@link Endpoint} object.
 * <p>
 * The interface defines the type of the communication with the remote peer and
 * the set of protocols (URI schemes) that can be used with this particular
 * interface.
 * <p>
 * {@link Interface#CONSOLIDATED} is an interface for high-level protocols which
 * automatically manage all necessary communication: transport streams, control
 * messages, parameter negotiation, etc. When a consolidated connection is
 * established, peers may automatically setup lower-level interfaces like {@link
 * Interface#AUDIO_SOURCE}, {@link Interface#AUDIO_REPAIR}, and {@link
 * Interface#AUDIO_CONTROL}.
 * <p>
 * {@link Interface#CONSOLIDATED} is mutually exclusive with lower-level
 * interfaces. In most cases, the user needs only {@link
 * Interface#CONSOLIDATED}. However, the lower-level interfaces may be useful if
 * an external signaling mechanism is used or for compatibility with third-party
 * software.
 * <p>
 * {@link Interface#AUDIO_SOURCE} and {@link Interface#AUDIO_REPAIR} are
 * lower-level unidirectional transport-only interfaces. The first is used to
 * transmit audio stream, and the second is used to transmit redundant repair
 * stream, if FEC is enabled.
 * <p>
 * {@link Interface#AUDIO_CONTROL} is a lower-level interface for control
 * streams. If you use {@link Interface#AUDIO_SOURCE} and {@link
 * Interface#AUDIO_REPAIR}, you usually also need to use {@link
 * Interface#AUDIO_CONTROL} to enable carrying additional non-transport
 * information.
 */
public enum Interface {

    /**
     * Interface that consolidates all types of streams (source, repair,
     * control).
     * <p>
     * Allowed operations: <ul>
     * <li>bind (sender, receiver)</li>
     * <li>connect (sender, receiver)</li>
     * </ul>
     * <p>
     * Allowed protocols: <ul>
     * <li>{@link Protocol#RTSP}</li>
     * </ul>
     */
    CONSOLIDATED(1),

    /**
     * Interface for audio stream source data.
     * <p>
     * Allowed operations: <ul>
     * <li>bind (receiver)</li>
     * <li>connect (sender)</li>
     * </ul>
     * <p>
     * Allowed protocols: <ul>
     * <li>{@link Protocol#RTP}</li>
     * <li>{@link Protocol#RTP_RS8M_SOURCE}</li>
     * <li>{@link Protocol#RTP_LDPC_SOURCE}</li>
     * </ul>
     */
    AUDIO_SOURCE(11),

    /**
     * Interface for audio stream repair data.
     * <p>
     * Allowed operations: <ul>
     * <li>bind (receiver)</li>
     * <li>connect (sender)</li>
     * </ul>
     * <p>
     * Allowed protocols: <ul>
     * <li>{@link Protocol#RS8M_REPAIR}</li>
     * <li>{@link Protocol#LDPC_REPAIR}</li>
     * </ul>
     */
    AUDIO_REPAIR(12),

    /**
     * Interface for audio control messages.
     * <p>
     * Allowed operations: <ul>
     * <li>bind (sender, receiver)</li>
     * <li>connect (sender, receiver)</li>
     * </ul>
     * <p>
     * Allowed protocols: <ul>
     * <li>{@link Protocol#RTCP}</li>
     * </ul>
     */
    AUDIO_CONTROL(13),
    ;

    final int value;

    Interface(int value) {
        this.value = value;
    }
}
