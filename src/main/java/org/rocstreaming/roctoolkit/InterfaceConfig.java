// Code generated by bindgen.py from roc-streaming/bindgen
// roc-toolkit git tag: v0.3.0, commit: 57b932b8

package org.rocstreaming.roctoolkit;

import java.time.Duration;
import lombok.*;

/**
 * Interface configuration.
 * <p>
 * Sender and receiver can have multiple slots ( {@link Slot} ), and each slot
 * can be bound or connected to multiple interfaces ( {@link Interface} ).
 * <p>
 * Each such interface has its own configuration, defined by this class.
 * <p>
 * See {@link RocSender#configure()}, {@link RocReceiver#configure()}.
 */
@Getter
@Builder(builderClassName = "Builder", toBuilder = true)
@ToString
@EqualsAndHashCode
public class InterfaceConfig {

    /**
     * Outgoing IP address.
     * <p>
     * If non-empty, explicitly identifies the OS network interface, by its IP address, from
     * which to send outgoing packets. If NULL, the network interface is selected
     * automatically by the OS, depending on the address of remote endpoint.
     * <p>
     * For example, if eth0 has IP address "192.168.0.1", then setting outgoing address to
     * "192.168.0.1" will force usage of eth0 interface.
     * <p>
     * Setting it to {@code 0.0.0.0} (for IPv4) or to {@code ::} (for IPv6) gives the same
     * effect as if it was NULL.
     * <p>
     * By default, empty.
     */
    private String outgoingAddress;

    /**
     * Multicast group IP address.
     * <p>
     * Multicast group should be set only when binding interface to an endpoint with
     * multicast IP address. If present, it defines an IP address of the OS network interface
     * on which to join the multicast group. If not present, no multicast group is joined.
     * <p>
     * It's possible to receive multicast traffic from only those OS network interfaces, on
     * which the process has joined the multicast group. When using multicast, the user
     * should either set this field, or join multicast group manually using OS-specific API.
     * <p>
     * It is allowed to set multicast group to {@code 0.0.0.0} (for IPv4) or to {@code ::}
     * (for IPv6), to be able to receive multicast traffic from all available interfaces.
     * However, this may not be desirable for security reasons.
     * <p>
     * By default, empty.
     */
    private String multicastGroup;

    /**
     * Socket address reuse flag.
     * <p>
     * When true (non-zero), SO_REUSEADDR is enabled for socket, regardless of socket type,
     * unless binding to ephemeral port (when port is set to zero).
     * <p>
     * When false (zero), SO_REUSEADDR is enabled for socket only if it has multicast type,
     * unless binding to ephemeral port (when port is set to zero).
     * <p>
     * For TCP-based protocols, SO_REUSEADDR allows immediate reuse of recently closed socket
     * in TIME_WAIT state, which may be useful you want to be able to restart server quickly.
     * <p>
     * For UDP-based protocols, SO_REUSEADDR allows multiple processes to bind to the same
     * address, which may be useful if you're using socket activation mechanism.
     * <p>
     * By default, false.
     */
    private boolean reuseAddress;

    /**
     * Construct builder for {@link InterfaceConfig}.
     */
    public static InterfaceConfig.Builder builder() {
        return new InterfaceConfigValidator();
    }
}
