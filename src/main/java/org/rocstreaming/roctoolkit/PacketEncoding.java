// Code generated by bindgen.py from roc-streaming/bindgen
// roc-toolkit git tag: v0.3.0, commit: 57b932b8

package org.rocstreaming.roctoolkit;

import lombok.EqualsAndHashCode;

/**
 * Packet encoding.
 * <p>
 * Each packet encoding defines sample format, channel layout, and rate. Each packet encoding is
 * caompatible with specific protocols.
 */
@EqualsAndHashCode
public class PacketEncoding {

    /**
     * PCM signed 16-bit, 1 channel, 44100 rate.
     * <p>
     * Represents 1-channel L16 stereo encoding from RTP A/V Profile (RFC 3551). Uses
     * uncompressed samples coded as interleaved 16-bit signed big-endian integers in two's
     * complement notation.
     * <p>
     * Supported by protocols:
     * <ul>
     *   <li>{@link Protocol#RTP}</li>
     *   <li>{@link Protocol#RTP_RS8M_SOURCE}</li>
     *   <li>{@link Protocol#RTP_LDPC_SOURCE}</li>
     * </ul>
     */
    static PacketEncoding AVP_L16_MONO = new PacketEncoding(11);

    /**
     * PCM signed 16-bit, 2 channels, 44100 rate.
     * <p>
     * Represents 2-channel L16 stereo encoding from RTP A/V Profile (RFC 3551). Uses
     * uncompressed samples coded as interleaved 16-bit signed big-endian integers in two's
     * complement notation.
     * <p>
     * Supported by protocols:
     * <ul>
     *   <li>{@link Protocol#RTP}</li>
     *   <li>{@link Protocol#RTP_RS8M_SOURCE}</li>
     *   <li>{@link Protocol#RTP_LDPC_SOURCE}</li>
     * </ul>
     */
    static PacketEncoding AVP_L16_STEREO = new PacketEncoding(10);

    final int value;

    public PacketEncoding(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    @Override
    public String toString() {
        return "PacketEncoding(" + value + ")";
    }

}
