// Code generated by bindgen.py from roc-streaming/bindgen
// roc-toolkit git tag: v0.3.0, commit: 57b932b8

package org.rocstreaming.roctoolkit;

/**
 * Resampler backend.
 * <p>
 * Affects CPU usage, quality, and clock synchronization precision. Some backends may be disabled
 * at build time.
 */
public enum ResamplerBackend {

    /**
     * Default backend.
     * <p>
     * Selects {@link ResamplerBackend#BUILTIN} when using
     * {@link ClockSyncProfile#RESPONSIVE}, or when SpeexDSP is disabled.
     * <p>
     * Otherwise, selects {@link ResamplerBackend#SPEEX}.
     */
    DEFAULT(0),

    /**
     * CPU-intensive good-quality high-precision built-in resampler.
     * <p>
     * This backend controls clock speed with very high precision, and hence is useful when
     * latency or synchronization error should be very low.
     * <p>
     * This backend has higher CPU usage, especially on high resampling quality and on CPUs
     * with small L3 caches.
     * <p>
     * The implementation is based on bandlimited interpolation algorithm.
     * <p>
     * This backend is always available.
     * <p>
     * Recommended for {@link ClockSyncProfile#RESPONSIVE} and on good CPUs.
     */
    BUILTIN(1),

    /**
     * Fast good-quality low-precision resampler based on SpeexDSP.
     * <p>
     * This backend has low CPU usage even on high resampler quality and cheap CPUs.
     * <p>
     * This backend controls clock speed with lower precision, and is not so good when
     * latency or synchronization error should be very low.
     * <p>
     * This backend is available only when SpeexDSP was enabled at build time.
     * <p>
     * Recommended for {@link ClockSyncProfile#GRADUAL} and on cheap CPUs.
     */
    SPEEX(2),

    /**
     * Fast medium-quality and medium-precision resampler combining SpeexDSP with decimation.
     * <p>
     * This backend uses SpeexDSP for converting between base rates (e.g. 44100 vs 48000) and
     * decimation/expansion (dropping or duplicating samples) for clock drift compensation.
     * <p>
     * Typical decimation rate needed to compensate clock drift is below 0.5ms/second (20
     * samples/second on 48Khz), which gives tolerable quality despite usage of decimation,
     * especially for speech.
     * <p>
     * When frame and packet sample rates are equal (e.g. both are 44100), only decimation
     * stage is needed, and this becomes fastest possible backend working almost as fast as
     * memcpy().
     * <p>
     * When frame and packet rates are different, usage of this backend compared to
     * {@link ResamplerBackend#SPEEX} allows to sacrify some quality, but somewhat improve
     * scaling precision and CPU usage in return.
     * <p>
     * This backend is available only when SpeexDSP was enabled at build time.
     * <p>
     * Recommended when CPU resources are extremely limited.
     */
    SPEEXDEC(3),
    ;

    final int value;

    ResamplerBackend(int value) {
        this.value = value;
    }
}
